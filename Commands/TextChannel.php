<?php

namespace App\Commands;

use App\Services\LogService;
use Discord\Discord;
use Discord\Helpers\Collection;
use Discord\Parts\Channel\Channel;
use Discord\Parts\Channel\Message;
use Discord\Parts\WebSockets\VoiceStateUpdate;
use App\Services\LogCronService;
use App\Models\User;
use DateTime;
use App\Models\ActivityHistory;
use App\Models\Activity as ModelActivity;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏
 */
class TextChannel
{
    //Id –∫–∞–Ω–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–µ –º–µ–º—ã
    public const ID_CHANEL_MEM = '1051775979334402098';

    //Id –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    public const ID_CHANEL_BOT = '1054734044321042432'; //'1054408436735021067';

    //Id –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º
    public const ID_CHANNEL_MUSIC = '1051846781132079186';

    //Id –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    public const ID_TIME_TEXT_CHANEL = '1054340896583335996';
    
    public const ID_NEWS_CHANNEL = '1054734044321042432'; //'1051479087593574470';

    /**
     * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤
     * @param VoiceStateUpdate $state
     * @param Discord $discord
     * @param $oldstate
     * @return void
     * @throws \Discord\Http\Exceptions\NoPermissionsException
     */
    public function process(Message $message, Discord $discord)
    {
        $date = new DateTime();
        
        if($message->channel_id == self::ID_CHANEL_MEM) {
            //–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–µ –º–µ–º—ã
            $this->setReactionsToMem($message);
            ActivityHistory::setActive($message->author->id, $date, ModelActivity::MEM_ACTIVE);
        } else if($message->channel_id == self::ID_CHANEL_BOT) {
            //–ï—Å–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
            $channel = $discord->getChannel($message->channel_id);
            $channel->messages->fetch($message->id)->done(function (Message $messageItem) use ($discord) {
                $this->processChannelBot($messageItem, $discord);
            });
        } else if($message->channel_id != self::ID_CHANNEL_MUSIC) {
            //–ï—Å–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
            ActivityHistory::setActive($message->author->id, $date, ModelActivity::MESSAGE_ACTIVE);
        } else if($message->channel_id == self::ID_CHANNEL_MUSIC) {
            //–ï—Å–ª–∏ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            ActivityHistory::setActive($message->author->id, $date, ModelActivity::MUSIC_ACTIVE);
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞—Ü–∏—é –Ω–∞ —Ö–æ—Ä–æ—à–∏–π –º–µ–º
     * @param Message $message
     * @return void
     * @throws \Discord\Http\Exceptions\NoPermissionsException
     */
    private function setReactionsToMem(Message $message)
    {
        $arrayReactions = $this->getRandomReactions();

        foreach ($arrayReactions as $reaction) {
            $message->react($reaction)->done(function () {});
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
     * @return array
     */
    private function getRandomReactions(): array
    {
        $array = [
           'üòÄ','üòÄ','üòÉ','üòÑ','üòÇ','ü§™','üí©','ü§°','ü§•','üßê','üëÄ','üêò','ü§Æ','üëè','üëç','üò±','üåö'
        ];
        shuffle($array);
        $countReactions = rand(2,5);
        return array_slice($array,0, $countReactions);
    }

    /**
     * –ú–µ—Ç–æ–¥ —á–∏—Å—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
     * @param Discord $discord
     * @return void
     */
    public function clearTimeTextChat(Discord $discord, LogCronService $logCron)
    {
        try {
            $channel = $discord->getChannel(self::ID_TIME_TEXT_CHANEL);

            $channel->getMessageHistory([
            ])->done(function (Collection $messages) use ($discord, $channel, $logCron) {

                $messageArray = [];
                $messagesIds = [];

                foreach ($messages as $message) {

                    $messageArray[] = [
                        'id' => $message->id,
                        'content' => $message->content,
                        'author' => $message->author->username,
                        'author_id' => $message->author->id,
                    ];
                    $messagesIds[] = $message->id;
                }

                $messageArray = array_reverse($messageArray);

                if($messageArray === []) {
                    $logCron->message = '–í—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –ø—É—Å—Ç';
                    $dateEnd = new DateTime();
                    $logCron->dateFinish = $dateEnd->format('Y-m-d H:i:s');
                    $logCron->writeLog();
                }

                $channel->deleteMessages($messagesIds)->done(function () use ($discord, $messageArray, $logCron) {
                    $messagesStr = '–ë–æ—Ç –æ—Ç—á–∏—Å—Ç–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç' . PHP_EOL . '–°–æ–æ–±—â–µ–Ω–∏–π: ' . count($messageArray) . ' ```md' . PHP_EOL;
                    foreach ($messageArray as $item) {
                        $messagesStr .= '[AuthorId:' . $item['author_id'] . '] ' .
                            $item['author'] . ' >>> ' . $item['content'] . PHP_EOL;
                    }
                    $messagesStr .= '```';

                    LogService::setLog($messagesStr);
                    
                    $logCron->message = '–ö—Ä–æ–Ω –æ—Ç—á–∏—Å—Ç–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç';
                    $dateEnd = new DateTime();
                    $logCron->dateFinish = $dateEnd->format('Y-m-d H:i:s');
                    $logCron->writeLog();
                });
            });

        } catch (\Exception $e) {
            $discord->close();
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ —á–∏—Å—Ç–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç –¥–ª—è –≤–≤–æ–±–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É
     * @param Discord $discord
     * @return void
     */
    public function clearBotTextChat(Discord $discord)
    {
        try {
            $channel = $discord->getChannel(self::ID_CHANEL_BOT);

            $channel->getMessageHistory([
            ])->done(function (Collection $messages) use ($discord, $channel) {

                $messageArray = [];
                $messagesIds = [];

                foreach ($messages as $message) {

                    $messageArray[] = [
                        'id' => $message->id,
                        'content' => $message->content,
                        'author' => $message->author->username,
                        'author_id' => $message->author->id,
                    ];
                    $messagesIds[] = $message->id;
                }

                $messageArray = array_reverse($messageArray);

                if($messageArray === []) {
                    $discord->close();
                }

                $channel->deleteMessages($messagesIds)->done(function () use ($discord, $messageArray) {
                    $messagesStr = '–ë–æ—Ç –æ—Ç—á–∏—Å—Ç–∏–ª bot —á–∞—Ç' . PHP_EOL . '–°–æ–æ–±—â–µ–Ω–∏–π: ' . count($messageArray) . ' ```md' . PHP_EOL;
                    foreach ($messageArray as $item) {
                        $messagesStr .= '[AuthorId:' . $item['author_id'] . '] ' .
                            $item['author'] . ' >>> ' . $item['content'] . PHP_EOL;
                    }
                    $messagesStr .= '```';

                    LogService::setLog($messagesStr);
                });
            });

        } catch (\Exception $e) {
            $discord->close();
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function processChannelBot(Message $message, Discord $discord)
    {
        $messageText = $message->content;
        if($message->author->bot != 1) {
            if($messageText == 'help') {
                $this->helpCommand($message, $discord);
            } else if(strpos($messageText, 'like') !== false) {
                $this->likeCommand($message, $discord);
            } else if(strpos($messageText, 'splite') !== false) {
                $this->spliteCommand($message, $discord);
            } else if($messageText == 'check_active') {
                $this->checkActiveCommand($message, $discord);
            }else {
                $this->notFoundCommand($discord);
            }
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function helpCommand(Message $message, Discord $discord)
    {
        $helpString = ">>> **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞**" . PHP_EOL .
            "1. splite [Id_–ö–æ–º–Ω–∞—Ç—ã] - –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ 2 –∫–æ–º–∞–Ω–¥—ã";

        $channelBot = $discord->getChannel(self::ID_CHANEL_BOT);
        $channelBot->sendMessage($helpString);

        LogService::setLog('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' . $message->author->username . '. –ó–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É **help**');
    }

    /**
     * –ö–æ–º–∞–¥–∞ –∂–µ—Ä—Ç–≤—É–µ—Ç –º–æ–Ω–µ—Ç–æ—á–∫–æ–π
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function likeCommand(Message $message, Discord $discord)
    {
        $messageText = $message->content;
        $userSenderUsername = $message->author->username;
        $userSender = $message->author->id;
        $idUser = substr($messageText, 5);
        $userData = explode('#', $idUser);

        if($userData == [] || count($userData) != 2) {
            BotEcho::printError($discord, '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–∏–∫#–¢–µ–≥');
            return;
        }

        $user = User::findByUsername($userData[0], $userData[1]);
        if($user === null) {
            BotEcho::printError($discord, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        $yourUser = User::findByDiscordId($userSender);
        if($yourUser === null) {
            BotEcho::printError($discord, '–ü–æ—Ö–æ–∂–µ –≤–∞—Å –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É');
            return;
        }

        if($yourUser->balance <= 0) {
            BotEcho::printError($discord, '–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç');
            return;
        }

        $isLike = ActivityHistory::getActivityByUser($userSender, ModelActivity::LIKE_ACTIVE);
        if($isLike) {
            BotEcho::printError($discord, '–í—ã —É–∂–µ –¥–æ–Ω–∞—Ç–∏–ª–∏');
            return;
        }

        $userRecipient = $user->discord_id;
        $result = User::DonateMonet($userSender, $userRecipient);
        if($result) {
            $date = new DateTime();
            ActivityHistory::setActive($userSender, $date, ModelActivity::LIKE_ACTIVE);
            $message = "**" . $userSenderUsername . "ü™ô >> >> >> " . $userData[0] . "ü™ô**";
            BotEcho::printSuccess($discord, $message);
        } else {
            BotEcho::printError($discord, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã **like**');
        }
    }

    private function checkActiveCommand(Message $message, Discord $discord)
    {

    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function spliteCommand(Message $message, Discord $discord)
    {
        $messageText = $message->content;
        $idChannel = substr($messageText, 7);
        $channel = $discord->getChannel($idChannel);
        $channelBot = $discord->getChannel(self::ID_CHANEL_BOT);
        if($channel == null) {
            $channelBot->sendMessage('–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üëª');
            return;
        }

        $this->acceptCommand($discord);


        $arrayMembers = [];

        foreach ($channel->members as $member){
            $arrayMembers[] = [
                'id' => $member['user_id'],
            ];
        }

        shuffle($arrayMembers);

        $guild = $channel->guild;
        $voiceChannel = $this->getNameChannel(2);

        $channelOne = $guild->channels->create([
            'name' => $voiceChannel[0],
            'type' => Channel::TYPE_VOICE,
            'parent_id' => VoiceChannel::ID_CATEGORY_VOICE_CHANNEL,
            'nsfw' => false,
        ]);

        $channelTwo = $guild->channels->create([
            'name' => $voiceChannel[1],
            'type' => Channel::TYPE_VOICE,
            'parent_id' => VoiceChannel::ID_CATEGORY_VOICE_CHANNEL,
            'nsfw' => false,
        ]);

        $guild->channels->save($channelOne)->done(function(Channel $channelOne) use ($arrayMembers, $guild, $channelTwo) {
            $guild->channels->save($channelTwo)->done(function(Channel $channelTwo) use ($arrayMembers, $channelOne) {
                $f = true;
                foreach ($arrayMembers as $member) {
                    if($f == true) {
                        $channelOne->moveMember($member['id']);
                    } else {
                        $channelTwo->moveMember($member['id']);
                    }
                    $f = !$f;
                }
            });
        });

        LogService::setLog('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' . $message->author->username . '. –ó–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É splite');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     * @param Discord $discord
     * @return void
     */
    private function notFoundCommand(Discord $discord)
    {
        $array = [
            'üñï','ü•¥','üëª','üß†ü§è','ü§¢','üëæ','üíÄ'
        ];
        $num = rand(0,6);
        $emoji = $array[$num];
        $channel = $discord->getChannel(self::ID_CHANEL_BOT);
        $channel->sendMessage('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ' . $emoji);
    }

    /**
     * –ë–æ—Ç –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É –∏ —Å–µ–π—á–∞—Å –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
     * @param Discord $discord
     * @return void
     */
    private function acceptCommand(Discord $discord)
    {
        $array = [
            'üëå','üëç','üçª','ü•Ç','üí™'
        ];
        $num = rand(0,4);
        $emoji = $array[$num];

        $channelBot = $discord->getChannel(self::ID_CHANEL_BOT);
        $channelBot->sendMessage('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª —â–∞—Å –≤—Å—ë –±—É–¥–µ—Ç ' . $emoji);
    }

    /**
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
     * @param int $countName
     * @return array
     */
    private function getNameChannel(int $countName): array
    {
        $array = [
            '–ë–µ—Ä–µ–∂–µ–Ω—ã–µ –ª–æ—Ö–∏ ü§ì', '–°—ã–Ω—ã –ú–∏—Ä–∞–∂–∞ üèú', '–ë—Ä–∞–≤—ã–µ —Ä–µ–±—è—Ç–∞ üí™', '–ù–æ—á–Ω—ã–µ –º–æ—Ä—Ç—ã—à–∫–∏ üêí', '–ú—Å—Ç–∏—Ç–µ–ª–∏ üõ°',
            '–ê–∏–º—â–∏–∫–∏', '–ë–µ–∑ –î–∏–º—ã', '–ë–æ—Ä–æ–¥–∞—á–∏ üßî', '–õ—é–¥–∏ –≤ —á–µ—Ä–Ω–æ–º üï∂'
        ];
        shuffle($array);
        return array_slice($array,0, $countName);
    }
}