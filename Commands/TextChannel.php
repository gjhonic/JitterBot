<?php

namespace App\Commands;

use App\Models\Level;
use App\Services\LogService;
use Discord\Discord;
use Discord\Helpers\Collection;
use Discord\Parts\Channel\Channel;
use Discord\Parts\Channel\Message;
use Discord\Parts\WebSockets\VoiceStateUpdate;
use App\Services\LogCronService;
use App\Models\User;
use DateTime;
use App\Models\ActivityHistory;
use App\Models\Activity as ModelActivity;
use App\Models\Daily;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏
 */
class TextChannel
{
    //Id –∫–∞–Ω–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–µ –º–µ–º—ã
    public const ID_CHANEL_MEM = '1051775979334402098';

    //Id –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    public const ID_CHANEL_BOT = '1054408436735021067';

    //Id –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º
    public const ID_CHANNEL_MUSIC = '1051846781132079186';

    //Id –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    public const ID_TIME_TEXT_CHANEL = '1054340896583335996';
    
    public const ID_NEWS_CHANNEL = '1051479087593574470';

    /**
     * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     * @throws \Discord\Http\Exceptions\NoPermissionsException
     */
    public function process(Message $message, Discord $discord)
    {
        $date = new DateTime();

        if($message->author->bot){
            return;
        }
        
        if($message->channel_id == self::ID_CHANEL_MEM) {
            //–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–µ –º–µ–º—ã
            $this->setReactionsToMem($message);
            ActivityHistory::setActive($message->author->id, $date, ModelActivity::MEM_ACTIVE);
        } else if($message->channel_id == self::ID_CHANEL_BOT) {
            //–ï—Å–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
            $channel = $discord->getChannel($message->channel_id);
            $channel->messages->fetch($message->id)->done(function (Message $messageItem) use ($discord) {
                $this->processChannelBot($messageItem, $discord);
            });
        } else if($message->channel_id != self::ID_CHANNEL_MUSIC && !$message->author->bot) {
            //–ï—Å–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
            ActivityHistory::setActive($message->author->id, $date, ModelActivity::MESSAGE_ACTIVE);
        } else if($message->channel_id == self::ID_CHANNEL_MUSIC && !$message->author->bot) {
            //–ï—Å–ª–∏ –∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            ActivityHistory::setActive($message->author->id, $date, ModelActivity::MUSIC_ACTIVE);
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞—Ü–∏—é –Ω–∞ —Ö–æ—Ä–æ—à–∏–π –º–µ–º
     *
     * @param Message $message
     * @return void
     * @throws \Discord\Http\Exceptions\NoPermissionsException
     */
    private function setReactionsToMem(Message $message)
    {
        $arrayReactions = $this->getRandomReactions();

        foreach ($arrayReactions as $reaction) {
            $message->react($reaction)->done(function () {});
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
     *
     * @return array
     */
    private function getRandomReactions(): array
    {
        $array = [
           'üòÄ','üòÄ','üòÉ','üòÑ','üòÇ','ü§™','üí©','ü§°','ü§•','üßê','üëÄ','üêò','ü§Æ','üëè','üëç','üò±','üåö'
        ];
        shuffle($array);
        $countReactions = rand(2,5);
        return array_slice($array,0, $countReactions);
    }

    /**
     * –ú–µ—Ç–æ–¥ —á–∏—Å—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
     *
     * @param Discord $discord
     * @param LogCronService $logCron
     * @return void
     */
    public function clearTimeTextChat(Discord $discord, LogCronService $logCron)
    {
        try {
            $channel = $discord->getChannel(self::ID_TIME_TEXT_CHANEL);

            $channel->getMessageHistory([
            ])->done(function (Collection $messages) use ($discord, $channel, $logCron) {

                $messageArray = [];
                $messagesIds = [];

                foreach ($messages as $message) {

                    $messageArray[] = [
                        'id' => $message->id,
                        'content' => $message->content,
                        'author' => $message->author->username,
                        'author_id' => $message->author->id,
                    ];
                    $messagesIds[] = $message->id;
                }

                $messageArray = array_reverse($messageArray);

                if($messageArray === []) {
                    $logCron->message = '–í—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –ø—É—Å—Ç';
                    $dateEnd = new DateTime();
                    $logCron->dateFinish = $dateEnd->format('Y-m-d H:i:s');
                    $logCron->writeLog();
                }

                $channel->deleteMessages($messagesIds)->done(function () use ($discord, $messageArray, $logCron) {
                    $messagesStr = '–ë–æ—Ç –æ—Ç—á–∏—Å—Ç–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç' . PHP_EOL . '–°–æ–æ–±—â–µ–Ω–∏–π: ' . count($messageArray) . PHP_EOL;
                    foreach ($messageArray as $item) {
                        $messagesStr .= '[AuthorId:' . $item['author_id'] . '] ' .
                            $item['author'] . ' >>> ' . $item['content'] . PHP_EOL;
                    }

                    LogService::setLog($messagesStr);
                    
                    $logCron->message = '–ö—Ä–æ–Ω –æ—Ç—á–∏—Å—Ç–∏–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç';
                    $dateEnd = new DateTime();
                    $logCron->dateFinish = $dateEnd->format('Y-m-d H:i:s');
                    $logCron->writeLog();
                });
            });

        } catch (\Exception $e) {
            $discord->close();
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ —á–∏—Å—Ç–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç –¥–ª—è –≤–≤–æ–±–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É
     *
     * @param Discord $discord
     * @param LogCronService $logCron
     * @return void
     */
    public function clearBotTextChat(Discord $discord, LogCronService $logCron)
    {
        try {
            $channel = $discord->getChannel(self::ID_CHANEL_BOT);

            $channel->getMessageHistory([
            ])->done(function (Collection $messages) use ($discord, $channel, $logCron) {

                $messageArray = [];
                $messagesIds = [];

                foreach ($messages as $message) {

                    $messageArray[] = [
                        'id' => $message->id,
                        'content' => $message->content,
                        'author' => $message->author->username,
                        'author_id' => $message->author->id,
                    ];
                    $messagesIds[] = $message->id;
                }

                $messageArray = array_reverse($messageArray);

                if($messageArray === []) {
                    $discord->close();
                }

                $channel->deleteMessages($messagesIds)->done(function () use ($discord, $messageArray, $logCron) {
                    $messagesStr = '–ë–æ—Ç –æ—Ç—á–∏—Å—Ç–∏–ª bot —á–∞—Ç' . PHP_EOL . '–°–æ–æ–±—â–µ–Ω–∏–π: ' . count($messageArray) . PHP_EOL;
                    foreach ($messageArray as $item) {
                        $messagesStr .= '[AuthorId:' . $item['author_id'] . '] ' .
                            $item['author'] . ' >>> ' . $item['content'] . PHP_EOL;
                    }

                    LogService::setLog($messagesStr);

                    $logCron->message = '–ö—Ä–æ–Ω –æ—Ç—á–∏—Å—Ç–∏–ª bot —á–∞—Ç';
                    $dateEnd = new DateTime();
                    $logCron->dateFinish = $dateEnd->format('Y-m-d H:i:s');
                    $logCron->writeLog();
                });
            });

        } catch (\Exception $e) {
            $discord->close();
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function processChannelBot(Message $message, Discord $discord)
    {
        $messageText = $message->content;
        if($message->author->bot != 1) {
            if($messageText == 'help') {
                $this->helpCommand($message, $discord);
            } else if(strpos($messageText, 'like') !== false) {
                $this->likeCommand($message, $discord);
            } else if(strpos($messageText, 'splite') !== false) {
                $this->spliteCommand($message, $discord);
            } else if($messageText == 'check_active') {
                $this->checkActiveCommand($message, $discord);
            } else if($messageText == 'check_level') {
                $this->checkLevelCommand($message, $discord);
            } else if($messageText == 'level_up') {
                $this->levelUpCommand($message, $discord);
            } else if($messageText == 'active_history') {
                $this->activeHistoryCommand($message, $discord);
            } else {
                $this->notFoundCommand($message, $discord);
            }
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function helpCommand(Message $message, Discord $discord)
    {
        $helpString = "**–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞**" . PHP_EOL . PHP_EOL .
            "1. **splite [Id_–ö–æ–º–Ω–∞—Ç—ã]** - –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ 2 –∫–æ–º–∞–Ω–¥—ã" . PHP_EOL;
        
        $helpString .= "2. **like [–ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]#[–¢–µ–≥]** - –ö–æ–º–∞–Ω–¥–∞ –∂–µ—Ä—Ç–≤—É–µ—Ç –º–æ–Ω–µ—Ç–æ—á–∫–æ–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" . PHP_EOL;
        $helpString .= "3. **check_active** - –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π" . PHP_EOL;
        $helpString .= "4. **check_level** - –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Ä–æ–≤–Ω—è" . PHP_EOL;
        $helpString .= "5. **level_up** - –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" . PHP_EOL;
        $helpString .= "6. **active_history** - –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π" . PHP_EOL;

        BotEcho::printSuccess($discord, $helpString);
        User::incCountHelp($message->author->id);
    }

    /**
     * –ö–æ–º–∞–¥–∞ –∂–µ—Ä—Ç–≤—É–µ—Ç –º–æ–Ω–µ—Ç–æ—á–∫–æ–π
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function likeCommand(Message $message, Discord $discord)
    {
        $messageText = $message->content;
        $userSenderUsername = $message->author->username;
        $userSender = $message->author->id;
        $idUser = substr($messageText, 5);
        $userData = explode('#', $idUser);

        if($userData == [] || count($userData) != 2) {
            BotEcho::printError($discord, '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–∏–∫#–¢–µ–≥');
            return;
        }

        $user = User::findByUsername($userData[0], $userData[1]);
        if($user === null) {
            BotEcho::printError($discord, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        $yourUser = User::findByDiscordId($userSender);
        if($yourUser === null) {
            BotEcho::printError($discord, '–ü–æ—Ö–æ–∂–µ –≤–∞—Å –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É');
            return;
        }

        if($yourUser->balance <= 0) {
            BotEcho::printError($discord, '–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç');
            return;
        }

        if($userSender == $user->discord_id) {
            BotEcho::printError($discord, '–ù–∏—á–µ–≥–æ —Å–µ–±–µ –¥–æ–Ω–∞—Ç, —Å–∞–º–æ–º—É —Å–µ–±–µ');
            return;
        }

        $isLike = ActivityHistory::getActivityByUser($userSender, ModelActivity::LIKE_ACTIVE);
        if($isLike) {
            BotEcho::printError($discord, '–í—ã —É–∂–µ –¥–æ–Ω–∞—Ç–∏–ª–∏');
            return;
        }

        $userRecipient = $user->discord_id;
        $result = User::DonateMonet($userSender, $userRecipient);
        if($result) {
            $date = new DateTime();
            ActivityHistory::setActive($userSender, $date, ModelActivity::LIKE_ACTIVE);
            $message = "**" . $userSenderUsername . "ü™ô >> >> >> " . $userData[0] . "ü™ô**";
            BotEcho::printSuccess($discord, $message);
        } else {
            BotEcho::printError($discord, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã **like**');
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function checkActiveCommand(Message $message, Discord $discord)
    {
        $userId = $message->author->id;

        $activities = ActivityHistory::getActivitiesByUser($userId);
        $dailyActivities = Daily::getLastDaily();

        if($activities === null) {
            BotEcho::printError($discord, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
            return;
        }

        $isCompleteDaily = false;
        $countMonet = 1;
        $countMonet += (int)$activities->voice_active;
        $countMonet += (int)$activities->message_active;
        $countMonet += (int)$activities->like_active;
        $countMonet += (int)$activities->mem_active;
        $countMonet += (int)$activities->reaction_active;
        $countMonet += (int)$activities->music_active;
        $ac1 = $dailyActivities->active1;
        $ac2 = $dailyActivities->active2;
        $ac3 = $dailyActivities->active3;

        if($activities->$ac1 && $activities->$ac2 && $activities->$ac3) {
            $isCompleteDaily = true;
            $countMonet += 3;
        }

        $message = '–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ **' . $activities->date . '**' . PHP_EOL . PHP_EOL;
        $message .= '–ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ' . ($activities->voice_active ? '‚úÖ' : '‚ùå') . PHP_EOL;
        $message .= '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–∞—Ö: ' . ($activities->message_active ? '‚úÖ' : '‚ùå') . PHP_EOL;
        $message .= '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö: ' . ($activities->like_active ? '‚úÖ' : '‚ùå') . PHP_EOL;
        $message .= '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ö–æ—Ä–æ—à–∏—Ö –º–µ–º–∞—Ö: ' . ($activities->mem_active ? '‚úÖ' : '‚ùå') . PHP_EOL;
        $message .= '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–∫—Ü–∏—è—Ö: ' . ($activities->reaction_active ? '‚úÖ' : '‚ùå') . PHP_EOL;
        $message .= '–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ' . ($activities->music_active ? '‚úÖ' : '‚ùå') . PHP_EOL;
        $message .= PHP_EOL;
        $message .= '–ï–∂–µ–¥–Ω–µ–≤–∫–∞: ' . ($isCompleteDaily ? '‚úÖ' : '‚ùå') . PHP_EOL;

        $message .= PHP_EOL;
        $message .= '–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ: ' . $countMonet . " ü™ô";

        BotEcho::printSuccess($discord, $message);
    }

    /**
     * –ú–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function activeHistoryCommand(Message $message, Discord $discord)
    {
        $userId = $message->author->id;

        $activities = ActivityHistory::getActivitiesHistoryByUser($userId, 10);

        if($activities === null) {
            BotEcho::printError($discord, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
            return;
        }

        if($activities === []) {
            BotEcho::printSuccess($discord, '–ù–∞ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –∏—Å—Ç–æ—Ä–∏–∏');
        }

        $messageHistory = '**–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 10 –¥–Ω–µ–π**' . PHP_EOL . PHP_EOL;
        $messageHistory .= '+----------------+------+------+------+------+------+------+' .PHP_EOL;
        $messageHistory .= '|-----–î–∞—Ç–∞----| üì£ | üí¨ | ü™ô | ü§£ | üëç | üéµ |' . PHP_EOL;
        $messageHistory .= '+----------------+------+------+------+------+------+------+' . PHP_EOL;

        foreach ($activities as $activity) {
            $messageHistory .= '|' . $activity->date . '| ';
            $messageHistory .= ($activity->voice_active ? '‚úÖ' : '‚ùå') . ' | ';
            $messageHistory .= ($activity->message_active ? '‚úÖ' : '‚ùå') . ' | ';
            $messageHistory .= ($activity->like_active ? '‚úÖ' : '‚ùå') . ' | ';
            $messageHistory .= ($activity->mem_active ? '‚úÖ' : '‚ùå') . ' | ';
            $messageHistory .= ($activity->reaction_active ? '‚úÖ' : '‚ùå') . ' | ';
            $messageHistory .=($activity->music_active ? '‚úÖ' : '‚ùå') . '|';
            $messageHistory .= PHP_EOL;
            $messageHistory .= '+----------------+------+------+------+------+------+------+' . PHP_EOL;
        }

        BotEcho::printSuccess($discord, $messageHistory);
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç–µ —Å—Ç–∞—Ç—É—Å —É—Ä–æ–≤–Ω—è
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    public function checkLevelCommand(Message $message, Discord $discord)
    {
        $userId = $message->author->id;
        $user = User::findByDiscordId($userId);

        if($user === null) {
            BotEcho::printError($discord, '–ü–æ—Ö–æ–∂–µ –≤–∞—Å –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É');
            return;
        }

        $level = $user->level;
        $levelNext = $level + 1;

        $levelData = Level::getLevel($level);

        $messageLevel = '–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: **' . $levelData['name'] . '**' . PHP_EOL;

        if($levelNext == 9) {
            $messageLevel .= '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–µ–≤–µ–ª–∞!' . PHP_EOL;
        } else {
            $levelData = Level::getLevel($levelNext);
            $money = $levelData['cost'] - $user->balance;
            $messageLevel .= '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: **' . $levelData['name'] . '**' . PHP_EOL . PHP_EOL;
            if($money > 0 ) {
                $messageLevel .= '–û—Å—Ç–∞–ª–æ—Å—å: **' . $money . '**ü™ô' . PHP_EOL;
            } else {
                $messageLevel .= '–í–∞–º —Ö–≤–∞—Ç–∞–µ—Ç ü™ô' . PHP_EOL;
            }

        }
        BotEcho::printSuccess($discord, $messageLevel);
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    public function levelUpCommand(Message $message, Discord $discord)
    {
        $userId = $message->author->id;
        $user = User::findByDiscordId($userId);

        if($user === null) {
            BotEcho::printError($discord, '–ü–æ—Ö–æ–∂–µ –≤–∞—Å –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É');
            return;
        }

        if($user->level == 8) {
            BotEcho::printError($discord, '–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –∫—Ä–∞–π–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å');
            return;
        }

        $nextLevel = $user->level + 1;

        $levelData = Level::getLevel($nextLevel);
        $levelOldData = Level::getLevel($user->level);

        if($user->balance < $levelData['cost']) {
            BotEcho::printError($discord, '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç');
            return;
        }

        $result = $user->levelUp($levelData);

        if($result) {

            $channel = $discord->getChannel(self::ID_CHANEL_BOT);
            $guild = $channel->guild;
            $member = $guild->members->get('id', $userId);

            $messageLevel = '**–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –ù–û–í–´–ô –£–†–û–í–ï–ù–¨**' . PHP_EOL;
            $messageLevel .= 'üéâüéäüéâüéäüéâüéäüéâüéäüéâüéäüéâüéä' . PHP_EOL;
            $messageLevel .= PHP_EOL;
            $messageLevel .= '–¢–µ–ø–µ—Ä—å –≤—ã: **' . $levelData['name'] . '**' . PHP_EOL;
            BotEcho::printSuccess($discord, $messageLevel);

            $member->removeRole($levelOldData['id'])->done(function () use ($member, $levelData) {
                $member->addRole($levelData['id']);
            });

        } else {
            BotEcho::printError($discord, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function spliteCommand(Message $message, Discord $discord)
    {
        $messageText = $message->content;
        $idChannel = substr($messageText, 7);
        $channel = $discord->getChannel($idChannel);
        $channelBot = $discord->getChannel(self::ID_CHANEL_BOT);
        if($channel == null) {
            $channelBot->sendMessage('–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üëª');
            return;
        }

        $arrayMembers = [];

        foreach ($channel->members as $member){
            $arrayMembers[] = [
                'id' => $member['user_id'],
            ];
        }

        shuffle($arrayMembers);

        $guild = $channel->guild;
        $voiceChannel = $this->getNameChannel(2);

        $channelOne = $guild->channels->create([
            'name' => $voiceChannel[0],
            'type' => Channel::TYPE_VOICE,
            'parent_id' => VoiceChannel::ID_CATEGORY_VOICE_CHANNEL,
            'nsfw' => false,
        ]);

        $channelTwo = $guild->channels->create([
            'name' => $voiceChannel[1],
            'type' => Channel::TYPE_VOICE,
            'parent_id' => VoiceChannel::ID_CATEGORY_VOICE_CHANNEL,
            'nsfw' => false,
        ]);

        $guild->channels->save($channelOne)->done(function(Channel $channelOne) use ($arrayMembers, $guild, $channelTwo) {
            $guild->channels->save($channelTwo)->done(function(Channel $channelTwo) use ($arrayMembers, $channelOne) {
                $f = true;
                foreach ($arrayMembers as $member) {
                    if($f == true) {
                        $channelOne->moveMember($member['id']);
                    } else {
                        $channelTwo->moveMember($member['id']);
                    }
                    $f = !$f;
                }
            });
        });

        BotEcho::printSuccess($discord, '–Ø –≤–∞—Å —Ä–∞–∑–¥–µ–ª–∏–ª)');
        LogService::setLog('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' . $message->author->username . '. –ó–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É splite');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * @param Message $message
     * @param Discord $discord
     * @return void
     */
    private function notFoundCommand(Message $message, Discord $discord)
    {
        BotEcho::printError($discord, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        User::incCountFailed($message->author->id);
    }

    /**
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
     *
     * @param int $countName
     * @return array
     */
    private function getNameChannel(int $countName): array
    {
        $array = [
            '–ë–µ—Ä–µ–∂–µ–Ω—ã–µ –ª–æ—Ö–∏ ü§ì', '–°—ã–Ω—ã –ú–∏—Ä–∞–∂–∞ üèú', '–ë—Ä–∞–≤—ã–µ —Ä–µ–±—è—Ç–∞ üí™', '–ù–æ—á–Ω—ã–µ –º–æ—Ä—Ç—ã—à–∫–∏ üêí', '–ú—Å—Ç–∏—Ç–µ–ª–∏ üõ°',
            '–ê–∏–º—â–∏–∫–∏', '–ë–µ–∑ –î–∏–º—ã', '–ë–æ—Ä–æ–¥–∞—á–∏ üßî', '–õ—é–¥–∏ –≤ —á–µ—Ä–Ω–æ–º üï∂', '–û–¥–Ω–æ—è–π—Ü–µ–≤—ã–µ ü•ö', '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª'
        ];
        shuffle($array);
        return array_slice($array,0, $countName);
    }
}